# Generated by Django 5.2.4 on 2025-08-11 05:33

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="The name of the category (e.g., 'Job', 'For Sale').", max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text="A brief description of the category's purpose.", null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('contact_info_visibility', models.BooleanField(default=False, help_text="Whether the user's contact information is visible")),
                ('phone_number', models.CharField(blank=True, help_text="The user's contact phone number.", max_length=15, null=True)),
                ('profile_picture', models.ImageField(blank=True, help_text='A profile picture for the user.', null=True, upload_to='profile_pictures/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Ad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='The main title of the advertisement.', max_length=255)),
                ('description', models.TextField(help_text="A detailed description of the ad's content.")),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='The price of the item or service, if applicable.', max_digits=10, null=True)),
                ('location', models.CharField(help_text='The geographical location associated with the ad.', max_length=255)),
                ('contact_info', models.CharField(help_text='Contact information for the ad, such as an email address or phone number.', max_length=255)),
                ('contact_info_visible', models.BooleanField(default=False, help_text="Controls if the contact information is visible to all users or only the ad's owner.")),
                ('event_date', models.DateField(blank=True, help_text="The date of the event, applicable for 'Event' ads.", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time the ad was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='The date and time the ad was last updated.')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates whether the ad is currently active and visible.')),
                ('user', models.ForeignKey(help_text='The user who created this ad.', on_delete=django.db.models.deletion.CASCADE, related_name='ads', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(help_text='The category this ad belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='ads', to='sales.category')),
            ],
        ),
        migrations.CreateModel(
            name='AdImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False, verbose_name='order')),
                ('image', models.ImageField(help_text='The image file for the ad.', upload_to='ad_images/')),
                ('ad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='sales.ad')),
            ],
            options={
                'ordering': ['ad', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='sales.ad')),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buyer_conversations', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created_at',),
                'unique_together': {('ad', 'buyer')},
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='The content of the message.')),
                ('sent_at', models.DateTimeField(auto_now_add=True, help_text='The date and time the message was sent.')),
                ('read', models.BooleanField(default=False, help_text='Indicates whether the recipient has read the message.')),
                ('conversation', models.ForeignKey(help_text='The Pair of ad_id and buyer, the owner can use per ad message', on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='sales.conversation')),
                ('sender', models.ForeignKey(help_text='The user who sent the message.', on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('sent_at',),
            },
        ),
    ]
